import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import psycopg2
import folium
from streamlit_folium import folium_static
import altair as alt
from PIL import Image
from datetime import datetime


# Establishing connection to PostgreSQL database
conn = psycopg2.connect(
    dbname="phonepe_pulse",
    user="postgres",
    password="Blue9791",
    host="localhost"
)

# Function to execute SQL query and return results as pandas DataFrame
def execute_query(query):
    cursor = conn.cursor()
    cursor.execute(query)
    columns = [desc[0] for desc in cursor.description]
    results = cursor.fetchall()
    cursor.close()
    return pd.DataFrame(results, columns=columns)

# SQL Queries
sql_queries = {
    "aggregated_insurance": "SELECT * FROM aggregated_insurance",
    "aggregated_transaction": "SELECT * FROM aggregated_transaction",
    "aggregated_user": "SELECT * FROM aggregated_user",
    "map_insurance": "SELECT * FROM map_insurance",
    "map_transaction": "SELECT * FROM map_transaction",
    "map_user": "SELECT * FROM map_user",
    "top_insurance": "SELECT * FROM top_insurance",
    "top_transaction": "SELECT * FROM top_transaction",
    "top_user": "SELECT * FROM top_user",
    "get_quarterly_app_opens": "SELECT years, quarter, states, appopens FROM map_user",
    "get_states": "SELECT DISTINCT states FROM map_user",  # Query to get distinct states
    "registered_user": "SELECT states, SUM(CAST(registereduser AS INTEGER)) AS total_registered_user FROM top_user GROUP BY states ORDER BY total_registered_user DESC LIMIT 5",
    "top_active_users": "SELECT states, SUM(CAST(appopens AS INTEGER)) AS total_app_opens FROM map_user GROUP BY states ORDER BY total_app_opens DESC LIMIT 5"

}

# Function to generate bar chart
def generate_bar_chart(data, x, y, title, xlabel, ylabel):
    chart = alt.Chart(data).mark_bar().encode(
        x=alt.X(x, title=xlabel),
        y=alt.Y(y, title=ylabel),
        tooltip=[x, y]
    ).properties(
        title=title,
        width=600,
        height=400
    )
    st.altair_chart(chart, use_container_width=True)

# Function to generate pie chart
def generate_pie_chart(data, values, labels, title):
    fig, ax = plt.subplots()
    ax.pie(data[values], labels=data[labels], autopct='%1.1f%%', startangle=140)
    ax.set_title(title)
    st.pyplot(fig)

# Function to generate choropleth map
def generate_choropleth_map(data, location_col, value_col, title):
    st.title(title)
    map_data = data[[location_col, value_col]]

    # Creating a folium map centered around India
    m = folium.Map(location=[20.5937, 78.9629], zoom_start=5)

    # Add a Choropleth layer to the map
    folium.Choropleth(
        geo_data='https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson',  # Replace with the path to your GeoJSON file
        name='choropleth',
        data=map_data,
        columns=[location_col, value_col],
        key_on='feature.properties.ST_NM',  # Replace with the corresponding property in your GeoJSON file
        fill_color='YlGn',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name=value_col
    ).add_to(m)

    folium_static(m)

# Function to generate horizontal bar chart
def generate_horizontal_bar_chart(data, x, y, title, xlabel, ylabel):
    chart = alt.Chart(data).mark_bar().encode(
        x=alt.X(x, title=xlabel),
        y=alt.Y(y, title=ylabel, sort='-x'),
        tooltip=[x, y]
    ).properties(
        title=title,
        width=600,
        height=400
    )
    st.altair_chart(chart, use_container_width=True)

# Function to generate line chart
def generate_line_chart(data, x, y, title, xlabel, ylabel):
    chart = alt.Chart(data).mark_line().encode(
        x=alt.X(x, title=xlabel),
        y=alt.Y(y, title=ylabel),
        tooltip=[x, y]
    ).properties(
        title=title,
        width=600,
        height=400
    )
    st.altair_chart(chart, use_container_width=True)

# Function to generate donut chart
def generate_donut_chart(data, values, labels, title):
    fig, ax = plt.subplots()
    wedges, texts, autotexts = ax.pie(
        data[values], labels=data[labels], autopct='%1.1f%%', startangle=140,
        wedgeprops=dict(width=0.3)
    )
    ax.set_title(title)
    st.pyplot(fig)

# Function to generate box plot
def generate_box_plot(data, x, y, title, xlabel, ylabel):
    fig, ax = plt.subplots()
    sns.boxplot(x=x, y=y, data=data, ax=ax)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    st.pyplot(fig)

# Function to generate area chart
def generate_area_chart(data, x, y, title, xlabel, ylabel):
    chart = alt.Chart(data).mark_area().encode(
        x=alt.X(x, title=xlabel),
        y=alt.Y(y, title=ylabel),
        tooltip=[x, y]
    ).properties(
        title=title,
        width=600,
        height=400
    )
    st.altair_chart(chart, use_container_width=True)

# Function to generate treemap
def generate_treemap(data, title):
    st.title(title)

# Main Streamlit Application Setup
st.set_page_config(layout="wide")
st.title("PhonePe Data Visualization and Exploration")

# Sidebar Navigation
with st.sidebar:
    select = st.selectbox("Main Menu", ["HOME", "DASHBOARD", "INSIGHTS"])
if select == "HOME":
    col1, col2 = st.columns(2)

    with col1:
        st.header("PHONEPE PULSE")
        st.subheader("YOUR TRUSTED DIGITAL FINANCE COMPANION")
        st.markdown(
            "PhonePe Pulse is your steadfast ally in the digital financial landscape, revolutionizing the way you effortlessly manage your money!")
        st.write("****KEY FEATURES****")
        st.write("****Seamless Credit & Debit Card Integration****")
        st.write("****Instant Bank Balance Check****")
        st.write("****Secure Money Storage****")
        st.write("****PIN-Based Authorization****")
        st.download_button("GET STARTED NOW", "https://www.phonepe.com/app-download/")

    with col2:
        st.image(Image.open("/Users/ptsaravanan/Downloads/phonepe_image.webp"), width=600)

    col3, col4 = st.columns(2)

    with col3:
        st.image(Image.open("/Users/ptsaravanan/Downloads/spotlight_1.jpg"), width=400)

    with col4:
        st.write("****EFFORTLESS FINANCIAL TRANSACTIONS****")
        st.write("****Comprehensive Payment Solutions****")
        st.write("****Seamless Integration with Banking Services****")
        st.write("****Flexible Payment Options for All Needs****")
        st.write("****Tailored Convenience for PhonePe Merchants****")
        st.write("****Versatile Payment Methods for Every Occasion****")
        st.write("****1. Instant Bank Transfers & More****")
        st.write("****2. Swift QR Code Payments****")
        st.write("****Unlock Exciting Rewards & Benefits****")

    col5, col6 = st.columns(2)

    with col5:
        st.write("****Wallet-Free Transactions****")
        st.write("****Direct Bank-to-Bank Fund Transfers****")
        st.write("****Instant, Fee-Free Payments****")

    with col6:
        st.image(Image.open("/Users/ptsaravanan/Downloads/pulse-2.png"), width=500)
    st.markdown("""
        <style>
        .stApp {
            background-color: #F0CEFF; /* Violet background */
        }
        .stHeader {
            color: #FFFFFF; /* White text color for headers */
        }
        .stSubheader {
            color: #FFFFFF; /* White text color for subheaders */
        }
        .stTextInput, .stSelectbox {
            margin-bottom: 10px;
        }
        .stTabs [data-baseweb="tab-list"] {
            background: #FBF2FE; /* Violet background for tab container */
            padding: 10px;
            border-radius: 10px;
        }
        </style>
        """, unsafe_allow_html=True)
# Data Exploration Section
def get_current_quarter():
    current_month = datetime.now().month
    return (current_month - 1) // 3 + 1


# Get the current quarter dynamically
current_quarter = get_current_quarter()

# Streamlit code to display the dashboard
if select == "DASHBOARD":
    st.title("üìä Analytics Dashboard")

    # Tabs for different sections
    tab1, tab2, tab3, tab4 = st.tabs(
        ["üìÖ Quarterly Data", "üó∫Ô∏è Transaction Amount", "üë• Registered Users", "üöÄ Active Users"])

    with tab1:
        st.header("Active Users Over Quarters")
        st.write("Visualizing the number of app opens across different quarters.")

        query = sql_queries["get_quarterly_app_opens"]
        df_quarterly_app_opens = execute_query(query)
        generate_bar_chart(df_quarterly_app_opens, 'quarter', 'appopens', 'App Opens Over Quarters', 'Quarter',
                           'App Opens')

    with tab2:
        st.header("Transaction Amount by States")
        st.write("Viewing the variation in transaction amounts across states.")

        # Grouping the year and quarter selectors together
        st.subheader("Filter by Year and Quarter")
        col1, col2 = st.columns(2)

        with col1:
            year = st.selectbox("Select Year", [2020, 2021, 2022, 2023], index=3)  # Example years

        with col2:
            quarter = st.selectbox("Select Quarter", ["Q1", "Q2", "Q3", "Q4"], index=current_quarter - 1)

        # Use the selected year and quarter for the query
        query = f"SELECT * FROM aggregated_insurance WHERE years={year} AND quarter={current_quarter} ORDER BY transaction_amount DESC LIMIT 5"
        df_transaction_amount = execute_query(query)

        # Layout for Donut and Choropleth Chart
        col1, col2 = st.columns([1, 1.5])
        with col1:
            st.write("### Top 5 states by transaction amount:")
            generate_donut_chart(df_transaction_amount, 'transaction_amount', 'states', 'Transaction Amount by States')
        with col2:
            st.write("### Geographical distribution of transaction amounts:")
            generate_choropleth_map(df_transaction_amount, 'states', 'transaction_amount',
                                    'Top 5 states')

    with tab3:
        st.header("Top 5 States by Registered Users")
        st.write("Highlighting the top states with the most registered users.")

        query = sql_queries["registered_user"]
        df_registered_users = execute_query(query)
        generate_bar_chart(df_registered_users, 'states', 'total_registered_user', 'Top 5 States by Registered Users',
                           'States', 'Total Registered Users')

    with tab4:
        st.header("Top 5 States by Active Users")
        st.write("Focusing on states with the highest number of active users.")

        query = sql_queries["top_active_users"]
        df_app_opens = execute_query(query)
        generate_bar_chart(df_app_opens, 'states', 'total_app_opens', 'Top 5 States by Active Users', 'States',
                           'Total Active Users')

    st.write("Explore different aspects of the data using the sections above.")

    import streamlit as st


    st.markdown("""
    <style>
    .stApp {
        background-color: #F0CEFF; /* Violet background */
    }
    .stHeader {
        color: #FFFFFF; /* White text color for headers */
    }
    .stSubheader {
        color: #FFFFFF; /* White text color for subheaders */
    }
    .stTextInput, .stSelectbox {
        margin-bottom: 10px;
    }
    .stTabs [data-baseweb="tab-list"] {
        background: #FBF2FE; /* Violet background for tab container */
        padding: 10px;
        border-radius: 10px;
    }
    </style>
    """, unsafe_allow_html=True)

# Top Charts Section
elif select == "INSIGHTS":
    st.header("Insights")
    question = st.selectbox("Select the Question", [
        "1. Transaction Amount Variation Across States",
        "2. Transaction Count by Transaction Type",
        "3. User Registration Distribution",
        "4. Transaction Count by Pincode",
        "5. Transaction Amount Trend Over Quarters",
        "6. Top Performing Pincodes",
        "7. Transaction Count by Brand",
        "8. Transaction Amount by District",
        "9. App Opens Variation Over Quarters",
        "10. User Distribution by District"
    ])
    # 1. Transaction Amount Variation Across States
    if question == "1. Transaction Amount Variation Across States":
        st.subheader("1. Transaction Amount Variation Across States")
        year = st.selectbox("Select Year", range(2020, 2024))  # Add year selector
        quarter = st.selectbox("Select Quarter", [1, 2, 3, 4])  # Add quarter selector

        # Formulate the query
        query = f"SELECT * FROM aggregated_insurance WHERE years={year} AND quarter={quarter}"

        # Execute the query and fetch the data
        df = execute_query(query)

        # Display the data in a dataframe
        st.dataframe(df)

        # Check if dataframe is empty and handle it
        if df.empty:
            st.write("No data found for the selected year and quarter.")
        else:
            # Generate a bar chart showing the transaction amount for each state
            generate_bar_chart(df, 'states', 'transaction_amount', 'Transaction Amount Variation Across States',
                               'States', 'Transaction Amount')

            # Generate a choropleth map displaying the transaction amount variation across states
            generate_choropleth_map(df, 'states', 'transaction_amount', 'Transaction Amount Variation Across States')


    # 2. Transaction Count by Transaction Type
    elif question == "2. Transaction Count by Transaction Type":
        st.subheader("TRANSACTION COUNT BY TRANSACTION TYPE")

        # Selecting the data from the SQL table
        query = sql_queries["aggregated_transaction"]
        df = execute_query(query)

        # Display the data
        st.dataframe(df)

        # Generate a horizontal bar chart to show transaction count by transaction type
        chart_bar = alt.Chart(df).mark_bar().encode(
            y=alt.Y('transaction_type', title='Transaction Type'),
            x=alt.X('transaction_count', title='Transaction Count'),
            tooltip=['transaction_type', 'transaction_count']
        ).properties(
            title="Transaction Count by Transaction Type (Bar Chart)",
            width=600,
            height=400
        )

        st.subheader("Horizontal Bar Chart:")
        st.altair_chart(chart_bar, use_container_width=True)

        # Generate a pie chart to show percentage distribution of transaction counts by transaction type
        chart_pie = alt.Chart(df).mark_arc().encode(
            color=alt.Color('transaction_type', legend=alt.Legend(title="Transaction Type")),
            tooltip=['transaction_type', 'transaction_count'],
            size=alt.Size('transaction_count', legend=None),
            theta='transaction_count',
            text='transaction_type'  # Label for each arc
        ).properties(
            title="Transaction Count by Transaction Type (Pie Chart)",
            width=400,
            height=400
        )

        st.subheader("Pie Chart:")
        st.altair_chart(chart_pie, use_container_width=True)

    # 3. User Registration Distribution
    elif question == "3. User Registration Distribution":
        st.subheader("USER REGISTRATION DISTRIBUTION")

        # Selecting the data from the SQL table
        query = sql_queries["map_user"]
        df = execute_query(query)

        # Display the data
        st.dataframe(df)

        # Generate a choropleth map displaying the distribution of registered users
        generate_choropleth_map(df, 'states', 'registereduser', 'User Registration Distribution')

        # Generate a bar chart for the distribution of registered users by state
        st.subheader("User Registration Distribution by State")
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('states', title='State'),
            y=alt.Y('registereduser', title='Registered Users'),
            tooltip=['states', 'registereduser']
        ).properties(
            width=600,
            height=400
        )
        st.altair_chart(chart, use_container_width=True)


    elif question == "4. Transaction Count by Pincode":
        st.subheader("TRANSACTION COUNT BY PINCODE")
        query = sql_queries["top_transaction"]
        df = execute_query(query)
        st.dataframe(df)  # Display the data
        generate_horizontal_bar_chart(df, 'pincodes', 'transaction_count',
                                      'Transaction Count by Pincode', 'Pincode',
                                      'Transaction Count')


    elif question == "5. Transaction Amount Trend Over Quarters":

        st.subheader("TRANSACTION AMOUNT TREND OVER QUARTERS")

        # Widget to select the year

        selected_year = st.selectbox("Select the Year", range(2019, 2024))

        # SQL query with parameter for selected year

        query = f"SELECT * FROM aggregated_transaction WHERE years = {selected_year}"

        df = execute_query(query)

        st.dataframe(df)  # Display the data

        # Generate line chart only if data is available

        if not df.empty:

            generate_line_chart(df, 'quarter', 'transaction_amount',

                                'Transaction Amount Trend Over Quarters', 'Quarter',

                                'Transaction Amount')

        else:

            st.warning("No data available for the selected year.")

    elif question == "6. Top Performing Pincodes":
        st.subheader("TOP PERFORMING PINCODES")
        query = sql_queries["top_transaction"]
        df = execute_query(query)
        st.dataframe(df)  # Display the data
        generate_horizontal_bar_chart(df, 'pincodes', 'transaction_count',
                                      'Top Performing Pincodes', 'Pincode', 'Transaction Count')


    elif question == "7. Transaction Count by Brand":

        st.subheader("TRANSACTION COUNT BY BRAND")

        query = sql_queries["aggregated_user"]

        df = execute_query(query)

        st.dataframe(df)  # Display the data

        # Generate horizontal bar chart

        if not df.empty:

            st.write("Transaction Count by Brand:")

            generate_horizontal_bar_chart(df, 'transaction_count', 'brands', 'Transaction Count by Brand',
                                          'Transaction Count', 'Brand')

        else:

            st.warning("No data available.")




    elif question == "8. Transaction Amount by District":

        st.subheader("TRANSACTION AMOUNT BY DISTRICT")

        query = sql_queries["map_transaction"]

        df = execute_query(query)

        district_selection = st.selectbox("Select District", df['districts'].unique())

        filtered_df = df[df['districts'] == district_selection]

        # Group the data by years

        grouped_df = filtered_df.groupby('years')['transaction_amount'].sum().reset_index()

        # Plot an interactive line chart

        st.write("### Transaction Amount Trend Over Years")

        st.line_chart(grouped_df.set_index('years'))

    elif question == "9. App Opens Variation Over Quarters":
        st.subheader("APP OPENS VARIATION OVER QUARTERS")
        # Code for Question 9 goes here
        year = st.selectbox('Select Year', range(2019, 2023))  # Example years, modify as needed

        # State or Overall selection
        state_or_overall = st.radio('Select State or Overall', ['State', 'Overall'])

        # Conditional display for state selection
        if state_or_overall == 'State':
            # Query to get distinct states
            state_query = sql_queries["get_states"]
            state_df = execute_query(state_query)
            states = state_df['states'].unique()
            state = st.selectbox('Select State', states)  # Replace with actual state names from the query
            query = f"SELECT years, quarter, states, appopens FROM map_user WHERE years = {year} AND states = '{state}'"
        else:
            query = f"SELECT years, quarter, states, appopens FROM map_user WHERE years = {year}"

        df = execute_query(query)

        # Sort the dataframe by the quarter
        df_sorted = df.sort_values(by='quarter')

        # Display the data
        st.dataframe(df_sorted)


        # Generate a line chart displaying the variation of app opens over quarters
        def generate_line_chart(df, x, y, title, x_label, y_label):
            import matplotlib.pyplot as plt
            fig, ax = plt.subplots()
            ax.plot(df[x], df[y], marker='o')
            ax.set_xlabel(x_label)
            ax.set_ylabel(y_label)
            ax.set_title(title)
            st.pyplot(fig)


        generate_line_chart(df_sorted, 'quarter', 'appopens',
                            'App Opens Variation Over Quarters',
                            'Quarter', 'App Opens')





    elif question == "10. User Distribution by District":

        st.subheader("USER DISTRIBUTION BY DISTRICT")

        # Selecting the data from the SQL table

        year = st.selectbox('Select Year', range(2019, 2024))  # Example years, modify as needed
        quarter = st.selectbox('Select Quarter', ['Q1', 'Q2', 'Q3', 'Q4'])  # Example quarters, modify as needed

        # Convert quarter to corresponding integers
        quarter_mapping = {'Q1': 1, 'Q2': 2, 'Q3': 3, 'Q4': 4}
        quarter_int = quarter_mapping[quarter]

        # Construct the query based on the selected options
        query = sql_queries["map_user"] + f" WHERE years = {year} AND quarter = {quarter_int}"

        df = execute_query(query)

        # Sort the dataframe by the number of registered users in descending order
        df_sorted = df.sort_values(by='registereduser', ascending=False)

        # Select the top 30 districts
        top_10_districts = df_sorted.head(10)

        # Display the data
        st.dataframe(top_10_districts)

        # Generate a horizontal bar chart displaying the distribution of registered users by district
        generate_horizontal_bar_chart(top_10_districts, 'registereduser', 'districts',
                                      'Top 10 User Distribution by District',
                                      'Registered Users', 'District')

    st.markdown("""
        <style>
        .stApp {
            background-color: #F0CEFF; /* Violet background */
        }
        .stHeader {
            color: #FFFFFF; /* White text color for headers */
        }
        .stSubheader {
            color: #FFFFFF; /* White text color for subheaders */
        }
        .stTextInput, .stSelectbox {
            margin-bottom: 10px;
        }
        .stTabs [data-baseweb="tab-list"] {
            background: #FBF2FE; /* Violet background for tab container */
            padding: 10px;
            border-radius: 10px;
        }
        </style>
        """, unsafe_allow_html=True)
