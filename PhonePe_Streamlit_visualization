import streamlit as st
from streamlit_option_menu import option_menu
import psycopg2
import pandas as pd
import plotly.express as px
import requests
import json
from PIL import Image


# Function to create a PostgreSQL connection
def get_postgres_connection():
    return psycopg2.connect(
        host="localhost",
        user="postgres",
        port="5432",
        password="****",
        database="phonepe_pulse"  # Ensure this matches your DB name
    )


# Function to fetch data from PostgreSQL and return a DataFrame
def get_dataframe_from_table(table_name):
    conn = get_postgres_connection()
    cursor = conn.cursor()
    query = f"SELECT * FROM {table_name}"

    # Execute the query to fetch data
    cursor.execute(query)

    # Fetch column names
    col_names = [desc[0] for desc in cursor.description]

    # Fetch data
    data = cursor.fetchall()

    conn.commit()
    cursor.close()
    conn.close()

    return pd.DataFrame(data, columns=col_names)


# Defining data fetching logic for each required DataFrame
Aggre_insurance = get_dataframe_from_table("aggregated_insurance")
Aggre_transaction = get_dataframe_from_table("aggregated_transaction")
Aggre_user = get_dataframe_from_table("aggregated_user")
map_insurance = get_dataframe_from_table("map_insurance")
map_transaction = get_dataframe_from_table("map_transaction")
map_user = get_dataframe_from_table("map_user")
top_insurance = get_dataframe_from_table("top_insurance")
top_transaction = get_dataframe_from_table("top_transaction")
top_user = get_dataframe_from_table("top_user")





# Analysis functions for various dataframes
def Transaction_amount_count_Y(df, year):
    tacy = df[df["years"] == year]
    tacy.reset_index(drop=True, inplace=True)
    tacyg = tacy.groupby("states")[["transaction_count", "transaction_amount"]].sum().reset_index()

    col1, col2 = st.columns(2)
    with col1:
        fig_amount = px.bar(tacyg, x="states", y="transaction_amount",
                            title=f"{year} TRANSACTION AMOUNT",
                            color_discrete_sequence=px.colors.sequential.Aggrnyl,
                            height=650, width=600)
        st.plotly_chart(fig_amount)

    with col2:
        fig_count = px.bar(tacyg, x="states", y="transaction_count",
                           title=f"{year} TRANSACTION COUNT",
                           color_discrete_sequence=px.colors.sequential.Bluered_r,
                           height=650, width=600)
        st.plotly_chart(fig_count)

    col1, col2 = st.columns(2)
    with col1:
        url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
        response = requests.get(url)
        data1 = json.loads(response.content)
        states_name = []
        for feature in data1["features"]:
            states_name.append(feature["properties"]["ST_NM"])

        states_name.sort()

        fig_india_1 = px.choropleth(tacyg, geojson=data1, locations="states", featureidkey="properties.ST_NM",
                                    color="transaction_amount", color_continuous_scale="Rainbow",
                                    range_color=(tacyg["transaction_amount"].min(), tacyg["transaction_amount"].max()),
                                    hover_name="states", title=f"{year} TRANSACTION AMOUNT", fitbounds="locations",
                                    height=600, width=600)
        fig_india_1.update_geos()
        st.plotly_chart(fig_india_1)

    with col2:
        fig_india_2 = px.choropleth(tacyg, geojson=data1, locations="states", featureidkey="properties.ST_NM",
                                    color="transaction_count", color_continuous_scale="Rainbow",
                                    range_color=(tacyg["transaction_count"].min(), tacyg["transaction_count"].max()),
                                    hover_name="states", title=f"{year} TRANSACTION COUNT", fitbounds="locations",
                                    height=600, width=600)
        fig_india_2.update_geos(visible=False)
        st.plotly_chart(fig_india_2)

    return tacy


def Transaction_amount_count_Y_Q(df, quarter):
    tacy = df[df["quarter"] == quarter]
    tacy.reset_index(drop=True, inplace=True)
    tacyg = tacy.groupby("states")[["transaction_count", "transaction_amount"]].sum().reset_index()

    col1, col2 = st.columns(2)
    with col1:
        fig_amount = px.bar(tacyg, x="states", y="transaction_amount",
                            title=f"{tacy['years'].min()} YEAR {quarter} QUARTER TRANSACTION AMOUNT",
                            color_discrete_sequence=px.colors.sequential.Aggrnyl,
                            height=650, width=600)
        st.plotly_chart(fig_amount)

    with col2:
        fig_count = px.bar(tacyg, x="states", y="transaction_count",
                           title=f"{tacy['years'].min()} YEAR {quarter} QUARTER TRANSACTION COUNT",
                           color_discrete_sequence=px.colors.sequential.Bluered_r,
                           height=650, width=600)
        st.plotly_chart(fig_count)

    col1, col2 = st.columns(2)
    with col1:
        url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
        response = requests.get(url)
        data1 = json.loads(response.content)
        states_name = []
        for feature in data1["features"]:
            states_name.append(feature["properties"]["ST_NM"])

        states_name.sort()

        fig_india_1 = px.choropleth(tacyg, geojson=data1, locations="states", featureidkey="properties.ST_NM",
                                    color="transaction_amount", color_continuous_scale="Rainbow",
                                    range_color=(tacyg["transaction_amount"].min(), tacyg["transaction_amount"].max()),
                                    hover_name="states",
                                    title=f"{tacy['years'].min()} YEAR {quarter} QUARTER TRANSACTION AMOUNT",
                                    fitbounds="locations",
                                    height=600, width=600)
        fig_india_1.update_geos(visible=False)
        st.plotly_chart(fig_india_1)

    with col2:
        fig_india_2 = px.choropleth(tacyg, geojson=data1, locations="states", featureidkey="properties.ST_NM",
                                    color="transaction_count", color_continuous_scale="Rainbow",
                                    range_color=(tacyg["transaction_count"].min(), tacyg["transaction_count"].max()),
                                    hover_name="states",
                                    title=f"{tacy['years'].min()} YEAR {quarter} QUARTER TRANSACTION COUNT",
                                    fitbounds="locations",
                                    height=600, width=600)
        fig_india_2.update_geos(visible=False)
        st.plotly_chart(fig_india_2)

    return tacy


def Aggre_Tran_Transaction_type(df, state):
    tacy = df[df["states"] == state]
    tacy.reset_index(drop=True, inplace=True)
    tacyg = tacy.groupby("transaction_type")[["transaction_count", "transaction_amount"]].sum().reset_index()

    col1, col2 = st.columns(2)
    with col1:
        fig_pie_1 = px.pie(tacyg, names="transaction_type", values="transaction_amount",
                           title=f"{state.upper()} TRANSACTION AMOUNT", hole=0.5,
                           width=600)
        st.plotly_chart(fig_pie_1)

    with col2:
        fig_pie_2 = px.pie(tacyg, names="transaction_type", values="transaction_count",
                           title=f"{state.upper()} TRANSACTION COUNT", hole=0.5,
                           width=600)
        st.plotly_chart(fig_pie_2)


# User Analysis functions
def Aggre_user_plot_1(df, year):
    aguy = df[df["years"] == year]
    aguy.reset_index(drop=True, inplace=True)
    aguyg = pd.DataFrame(aguy.groupby("brands")["transaction_count"].sum()).reset_index()

    fig_bar_1 = px.bar(aguyg, x="brands", y="transaction_count",
                       title=f"{year} BRANDS AND TRANSACTION COUNT",
                       color_discrete_sequence=px.colors.sequential.haline_r,
                       width=1000, height=800)
    st.plotly_chart(fig_bar_1)

    return aguy


def Aggre_user_plot_2(df, quarter):
    aguyq = df[df["quarter"] == quarter]
    aguyq.reset_index(drop=True, inplace=True)

    aguyqg = pd.DataFrame(aguyq.groupby("brands")["transaction_count"].sum()).reset_index()

    fig_bar_1 = px.bar(aguyqg, x="brands", y="transaction_count",
                       title=f"{quarter} QUARTER, BRANDS AND TRANSACTION COUNT",
                       color_discrete_sequence=px.colors.sequential.Magenta_r,
                       width=1000, height=800)
    st.plotly_chart(fig_bar_1)

    return aguyq


def Aggre_user_plot_3(df, state):
    auyqs = df[df["states"] == state]
    auyqs.reset_index(drop=True, inplace=True)

    fig_line_1 = px.line(auyqs, x="brands", y="transaction_count", hover_data="percentage",
                         title=f"{state.upper()} BRANDS, TRANSACTION COUNT, PERCENTAGE",
                         color_discrete_sequence=px.colors.sequential.Magenta,
                         width=1000, height=800, markers=True)
    st.plotly_chart(fig_line_1)


# Map-based Analysis
def Map_insur_District(df, state):
    tacy = df[df["states"] == state]
    tacy.reset_index(drop=True, inplace=True)
    tacyg = tacy.groupby("districts")[["transaction_count", "transaction_amount"]].sum().reset_index()

    col1, col2 = st.columns(2)
    with col1:
        fig_bar_1 = px.bar(tacyg, x="transaction_amount", y="districts",
                           orientation="h", height=600,
                           title=f"{state.upper()} DISTRICT AND TRANSACTION AMOUNT",
                           color_discrete_sequence=px.colors.sequential.Mint_r)
        st.plotly_chart(fig_bar_1)

    with col2:
        fig_bar_2 = px.bar(tacyg, x="transaction_count", y="districts",
                           orientation="h", height=600,
                           title=f"{state.upper()} DISTRICT AND TRANSACTION COUNT",
                           color_discrete_sequence=px.colors.sequential.Bluered_r)
        st.plotly_chart(fig_bar_2)


def map_user_plot_1(df, year):
    muy = df[df["years"] == year]
    muy.reset_index(drop=True, inplace=True)

    muyg = muy.groupby("states")[["registereduser", "appopens"]].sum().reset_index()

    fig_line_1 = px.line(muyg, x="states", y=["registereduser", "appopens"],
                         title=f"{year} REGISTERED USER, APPOPENS",
                         color_discrete_sequence=px.colors.sequential.Rainbow_r,
                         height=800, width=1000, markers=True)
    st.plotly_chart(fig_line_1)

    return muy


def map_user_plot_2(df, quarter):
    muyq = df[df["quarter"] == quarter]
    muyq.reset_index(drop=True, inplace=True)

    muyg = pd.DataFrame(muyq.groupby("states")[["registereduser", "appopens"]].sum()).reset_index()

    fig_line_1 = px.line(muyg, x="states", y=["registereduser", "appopens"],
                         title=f"{df['years'].min()} YEARS {quarter} QUARTER REGISTERED USER, APPOPENS",
                         color_discrete_sequence=px.colors.sequential.Rainbow_r,
                         height=800, width=1000, markers=True)
    st.plotly_chart(fig_line_1)

    return muyq


def map_user_plot_3(df, states):
    muyqs = df[df["states"] == states]
    muyqs.reset_index(drop=True, inplace=True)

    col1, col2 = st.columns(2)
    with col1:
        fig_map_user_bar_1 = px.bar(muyqs, x="registereduser", y="districts", orientation="h",
                                    title=f"{states.upper()} REGISTERED USER", height=800,
                                    color_discrete_sequence=px.colors.sequential.Rainbow_r)
        st.plotly_chart(fig_map_user_bar_1)

    with col2:
        fig_map_user_bar_2 = px.bar(muyqs, x="appopens", y="districts", orientation="h",
                                    title=f"{states.upper()} APPOPENS", height=800,
                                    color_discrete_sequence=px.colors.sequential.Rainbow)
        st.plotly_chart(fig_map_user_bar_2)


# Top Charts for Transaction Amount, Count, Registered Users, and App Opens
def Top_insurance_plot_1(df, state):
    # Filter DataFrame by the state
    tiy = df[df["states"] == state]
    tiy.reset_index(drop=True, inplace=True)

    # Create bar plots for the transaction amount and count
    col1, col2 = st.columns(2)
    with col1:
        fig_top_insur_bar_1 = px.bar(tiy, x="quarter", y="transaction_amount", hover_data="pincodes",
                                    title=f"TRANSACTION AMOUNT in {state}",
                                    height=650, width=600,
                                    color_discrete_sequence=px.colors.sequential.GnBu_r)
        st.plotly_chart(fig_top_insur_bar_1)

    with col2:
        fig_top_insur_bar_2 = px.bar(tiy, x="quarter", y="transaction_count", hover_data="pincodes",
                                    title=f"TRANSACTION COUNT in {state}",
                                    height=650, width=600,
                                    color_discrete_sequence=px.colors.sequential.Agsunset_r)
        st.plotly_chart(fig_top_insur_bar_2)
def top_user_plot_1(df, year):
    # Filter the DataFrame by the specified year
    tuy = df[df["years"] == year]
    tuy.reset_index(drop=True, inplace=True)

    # Group by state and quarter, then sum the registered users
    tuyg = tuy.groupby(["states", "quarter"])["registereduser"].sum().reset_index()

    # Create a bar plot for registered users, coloring by quarter
    fig_top_plot_1 = px.bar(
        tuyg,
        x="states",
        y="registereduser",
        color="quarter",
        title=f"{year} REGISTERED USERS",
        width=1000,
        height=800,
        color_discrete_sequence=px.colors.sequential.Burgyl,
    )

    st.plotly_chart(fig_top_plot_1)  # Display the plot in Streamlit

    return tuy  # Return the filtered DataFrame
def top_user_plot_2(df, state):
    # Filter the DataFrame by the specified state
    tuys = df[df["states"] == state]
    tuys.reset_index(drop=True, inplace=True)

    # Create a bar plot for registered users by quarter
    fig_top_plot_2 = px.bar(
        tuys,
        x="quarter",
        y="registereduser",
        title=f"REGISTERED USERS, PINCODES, QUARTER",
        width=1000,
        height=800,
        color="registereduser",
        hover_data=["pincodes"],  # Add hover data for extra information
        color_continuous_scale=px.colors.sequential.Magenta,  # Set a color scheme
    )

    st.plotly_chart(fig_top_plot_2)  # Display the plot in Streamlit
# Function for registered users' charts
def top_chart_registered_users(table_name):
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query to get the top 10 states with the most registered users
    query1 = f'''SELECT states, SUM(top_user.registereduser) AS registereduser
                 FROM {table_name}
                 GROUP BY states
                 ORDER BY registereduser DESC
                 LIMIT 10;'''

    cursor.execute(query1)
    data1 = cursor.fetchall()
    conn.commit()

    df1 = pd.DataFrame(data1, columns=["states", "Registered Users"])

    # Plot for the top 10 states with the most registered users
    fig1 = px.bar(
        df1,
        x="states",
        y="Registered Users",
        title="Top 10 states by Registered Users",
        color_discrete_sequence=px.colors.sequential.Aggrnyl,
        height=650,
        width=600
    )
    st.plotly_chart(fig1)

    # Query to get the top 10 states with the fewest registered users
    query2 = f'''SELECT states, SUM(registereduser) AS registereduser
                 FROM {table_name}
                 GROUP BY states
                 ORDER BY registereduser
                 LIMIT 10;'''

    cursor.execute(query2)
    data2 = cursor.fetchall()
    conn.commit()

    df2 = pd.DataFrame(data2, columns=["states", "Registered Users"])

    # Plot for the top 10 states with the fewest registered users
    fig2 = px.bar(
        df2,
        x="states",
        y="Registered Users",
        title="Bottom 10 states by Registered Users",
        color_discrete_sequence=px.colors.sequential.Aggrnyl_r,
        height=650,
        width=600
    )
    st.plotly_chart(fig2)

    # Don't forget to close the cursor and connection
    cursor.close()
    conn.close()
def top_chart_transaction_amount(table_name):
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query to get top 10 states by transaction amount
    query = f'''SELECT states, SUM(Transaction_amount) AS Transaction_amount
                FROM {table_name}
                GROUP BY states
                ORDER BY Transaction_amount DESC
                LIMIT 10;'''
    cursor.execute(query)
    data = cursor.fetchall()
    conn.commit()

    df = pd.DataFrame(data, columns=["states", "Transaction Amount"])

    col1, col2 = st.columns(2)
    with col1:
        fig_amount = px.bar(df, x="states", y="Transaction Amount",
                            title="Top 10 states by Transaction Amount",
                            color_discrete_sequence=px.colors.sequential.Aggrnyl,
                            height=650, width=600)
        st.plotly_chart(fig_amount)

    # Plot the bottom 10 states by transaction amount
    query2 = f'''SELECT states, SUM(transaction_amount) AS transaction_amount
                FROM {table_name}
                GROUP BY states
                ORDER BY transaction_amount
                LIMIT 10;'''
    cursor.execute(query2)
    data2 = cursor.fetchall()
    conn.commit()

    df2 = pd.DataFrame(data2, columns=["states", "Transaction Amount"])

    with col2:
        fig_amount_2 = px.bar(df2, x="states", y="Transaction Amount",
                              title="Last 10 states by Transaction Amount",
                              color_discrete_sequence=px.colors.sequential.Aggrnyl_r,
                              height=650, width=600)
        st.plotly_chart(fig_amount_2)


def top_chart_transaction_count(table_name):
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query to get top 10 states by transaction count
    query1 = f'''SELECT states, SUM(transaction_count) AS transaction_count
                FROM {table_name}
                GROUP BY states
                ORDER BY transaction_count DESC
                LIMIT 10;'''
    cursor.execute(query1)
    data1 = cursor.fetchall()
    conn.commit()

    df1 = pd.DataFrame(data1, columns=["states", "Transaction Count"])

    col1, col2 = st.columns(2)
    with col1:
        fig_count = px.bar(df1, x="states", y="Transaction Count",
                           title="Top 10 states by Transaction Count",
                           color_discrete_sequence=px.colors.sequential.Aggrnyl,
                           height=650, width=600)
        st.plotly_chart(fig_count)

    # Plot the bottom 10 states by transaction count
    query2 = f'''SELECT states, SUM(transaction_count) AS transaction_count
                FROM {table_name}
                GROUP BY states
                ORDER BY transaction_count
                LIMIT 10;'''
    cursor.execute(query2)
    data2 = cursor.fetchall()
    conn.commit()

    df2 = pd.DataFrame(data2, columns=["states", "Transaction Count"])

    with col2:
        fig_count_2 = px.bar(df2, x="states", y="Transaction Count",
                             title="Last 10 states by Transaction Count",
                             color_discrete_sequence=px.colors.sequential.Aggrnyl_r,
                             height=650, width=600)
        st.plotly_chart(fig_count_2)


def top_chart_registered_user(table_name, state):
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query to get top 10 districts by registered users in a specific state
    query = f'''SELECT districts, SUM(registereduser) AS registereduser
                FROM {table_name}
                WHERE states = '{state}'
                GROUP BY districts
                ORDER BY registereduser DESC
                LIMIT 10;'''
    cursor.execute(query)
    data = cursor.fetchall()
    conn.commit()

    df = pd.DataFrame(data, columns=["districts", "Registered User"])

    col1, col2 = st.columns(2)
    with col1:
        fig_user = px.bar(df, x="districts", y="Registered User",
                          title=f"Top 10 Districts by Registered User in {state}",
                          color_discrete_sequence=px.colors.sequential.Aggrnyl,
                          height=650, width=600)
        st.plotly_chart(fig_user)

    # Query to get the bottom 10 districts by registered users in a specific state
    query2 = f'''SELECT districts, SUM(registereduser) AS registereduser
                FROM {table_name}
                WHERE states = '{state}'
                GROUP BY districts
                ORDER BY registereduser
                LIMIT 10;'''
    cursor.execute(query2)
    data2 = cursor.fetchall()
    conn.commit()

    df2 = pd.DataFrame(data2, columns=["districts", "Registered User"])

    with col2:
        fig_user_2 = px.bar(df2, x="districts", y="Registered User",
                            title=f"Last 10 Districts by Registered User in {state}",
                            color_discrete_sequence=px.colors.sequential.Aggrnyl_r,
                            height=650, width=600)
        st.plotly_chart(fig_user_2)


def top_chart_appopens(table_name, state):
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query to get top 10 districts by app opens in a specific state
    query = f'''SELECT districts, SUM(appopens) AS appopens
                FROM {table_name}
                WHERE states = '{state}'
                GROUP BY districts
                ORDER BY appopens DESC
                LIMIT 10;'''
    cursor.execute(query)
    data = cursor.fetchall()
    conn.commit()

    df = pd.DataFrame(data, columns=["districts", "appopens"])

    col1, col2 = st.columns(2)
    with col1:
        fig_opens = px.bar(df, x="districts", y="appopens",
                           title=f"Top 10 Districts by App Opens in {state}",
                           color_discrete_sequence=px.colors.sequential.Aggrnyl,
                           height=650, width=600)
        st.plotly_chart(fig_opens)

    # Plot the bottom 10 districts by app opens
    query2 = f'''SELECT districts, SUM(appopens) AS appopens
                FROM {table_name}
                WHERE states = '{state}'
                GROUP BY districts
                ORDER BY appopens
                LIMIT 10;'''
    cursor.execute(query2)
    data2 = cursor.fetchall()
    conn.commit()

    df2 = pd.DataFrame(data2, columns=["districts", "appopens"])

    with col2:
        fig_opens_2 = px.bar(df2, x="districts", y="appopens",
                             title=f"Last 10 Districts by App Opens in {state}",
                             color_discrete_sequence=px.colors.sequential.Aggrnyl_r,
                             height=650, width=600)
        st.plotly_chart(fig_opens_2)


# Main Streamlit Application Setup
st.set_page_config(layout="wide")
st.title("PhonePe Data Visualization and Exploration")

with st.sidebar:
    select = option_menu("Main Menu", ["HOME", "DATA EXPLORATION", "TOP CHARTS"])

map_user.columns = map_user.columns.astype(str).str.lower().str.strip()
if select == "HOME":
    col1, col2 = st.columns(2)

    with col1:
        st.header("PHONEPE")
        st.subheader("INDIA'S BEST TRANSACTION APP")
        st.markdown("PhonePe is an Indian digital payments and financial technology company.")
        st.write("****FEATURES****")
        st.write("****Credit & Debit card linking****")
        st.write("****Bank Balance check****")
        st.write("****Money Storage****")
        st.write("****PIN Authorization****")
        st.download_button("DOWNLOAD THE APP NOW", "https://www.phonepe.com/app-download/")

    with col2:
        st.image(Image.open("/Users/ptsaravanan/Downloads/phonepe_image.webp"), width=600)

    col3, col4 = st.columns(2)

    with col3:
        st.image(Image.open("/Users/ptsaravanan/Downloads/spotlight_1.jpg"), width=400)

    with col4:
        st.write("****Effortless Transactions****")
        st.write("****All-in-One Payment Solution****")
        st.write("****Seamless Banking Integration****")
        st.write("****Flexible Payment Options****")
        st.write("****Convenient for PhonePe Merchants****")
        st.write("****Versatile Payment Methods****")
        st.write("****1. Direct Bank Transfers & More****")
        st.write("****2. Quick QR Code Payments****")
        st.write("****Earn Exciting Rewards****")

    col5, col6 = st.columns(2)

    with col5:
        st.write("****No Need to Top Up Wallets****")
        st.write("****Direct Bank-to-Bank Payments****")
        st.write("****Instant and Fee-Free****")

    with col6:
        st.image(Image.open("/Users/ptsaravanan/Downloads/pulse-2.png"), width=500)


elif select == "DATA EXPLORATION":
    tab1, tab2, tab3 = st.tabs(["Aggregated Analysis", "Map Analysis", "Top Analysis"])

    with tab1:
        method = st.radio("Select The Method", ["Insurance Analysis", "Transaction Analysis", "User Analysis"])

        if method == "Insurance Analysis":
            years = st.slider("Select The Year", Aggre_insurance["years"].min(),
                              Aggre_insurance["years"].max(), Aggre_insurance["years"].min())
            Transaction_amount_count_Y(Aggre_insurance, years)

            quarters = st.slider("Select The Quarter", Aggre_insurance["quarter"].min(),
                                 Aggre_insurance["quarter"].max(), Aggre_insurance["quarter"].min())
            Transaction_amount_count_Y_Q(Aggre_insurance, quarters)

        elif method == "Transaction Analysis":
            years = st.slider("Select The Year", Aggre_transaction["years"].min(),
                              Aggre_transaction["years"].max(), Aggre_transaction["years"].min())
            Aggre_tran_tac_Y = Transaction_amount_count_Y(Aggre_transaction, years)

            state = st.selectbox("Select The State", Aggre_tran_tac_Y["states"].unique())
            Aggre_Tran_Transaction_type(Aggre_tran_tac_Y, state)

            quarters = st.slider("Select The Quarter", Aggre_tran_tac_Y["quarter"].min(),
                                 Aggre_tran_tac_Y["quarter"].max(), Aggre_tran_tac_Y["quarter"].min())
            Aggre_tran_tac_Y_Q = Transaction_amount_count_Y_Q(Aggre_tran_tac_Y, quarters)

        elif method == "User Analysis":
            years = st.slider("Select The Year", Aggre_user["years"].min(),
                              Aggre_user["years"].max(), Aggre_user["years"].min())
            Aggre_user_Y = Aggre_user_plot_1(Aggre_user, years)

            quarters = st.slider("Select The Quarter", Aggre_user_Y["quarter"].min(),
                                 Aggre_user_Y["quarter"].max(), Aggre_user_Y["quarter"].min())
            Aggre_user_plot_2(Aggre_user_Y, quarters)

            state = st.selectbox("Select The State", Aggre_user_Y["states"].unique())
            Aggre_user_plot_3(Aggre_user_Y, state)


    with tab2:
        method_2 = st.radio("Select The Method", ["Map Insurance", "Map Transaction", "Map User"])

        if method_2 == "Map Insurance":
            years = st.slider("Select The Year_mi", map_insurance["years"].min(),
                              map_insurance["years"].max(), map_insurance["years"].min())
            map_insur_tac_Y = Transaction_amount_count_Y(map_insurance, years)

            state = st.selectbox("Select The State_mi", map_insur_tac_Y["states"].unique())
            Map_insur_District(map_insur_tac_Y, state)

            quarters = st.slider("Select The Quarter_mi", map_insur_tac_Y["quarter"].min(),
                                 map_insur_tac_Y["quarter"].max(), map_insur_tac_Y["quarter"].min())
            map_insur_tac_Y_Q = Transaction_amount_count_Y_Q(map_insur_tac_Y, quarters)

        elif method_2 == "Map Transaction":
            years = st.slider("Select The Year_mt", map_transaction["years"].min(),
                              map_transaction["years"].max(), map_transaction["years"].min())
            map_tran_tac_Y = Transaction_amount_count_Y(map_transaction, years)

            state = st.selectbox("Select The State_mt", map_tran_tac_Y["states"].unique())
            Map_insur_District(map_tran_tac_Y, state)

            quarters = st.slider("Select The Quarter_mt", map_tran_tac_Y["quarter"].min(),
                                 map_tran_tac_Y["quarter"].max(), map_tran_tac_Y["quarter"].min())
            map_tran_tac_Y_Q = Transaction_amount_count_Y_Q(map_tran_tac_Y, quarters)

        elif method_2 == "Map User":
            years = st.slider("Select The Year_mu", map_user["years"].min(),
                              map_user["years"].max(), map_user["years"].min())
            map_user_Y = map_user_plot_1(map_user, years)

            quarters = st.slider("Select The Quarter_mu", map_user_Y["quarter"].min(),
                                 map_user_Y["quarter"].max(), map_user_Y["quarter"].min())
            map_user_Y_Q = map_user_plot_2(map_user_Y, quarters)

            state = st.selectbox("Select The State_mu", map_user_Y_Q["states"].unique())
            map_user_plot_3(map_user_Y_Q, state)


    with tab3:
        method_3 = st.radio("Select The Method", ["Top Insurance", "Top Transaction", "Top User"])

        if method_3 == "Top Insurance":
            years = st.slider("Select The Year_ti", top_insurance["years"].min(),
                              top_insurance["years"].max(), top_insurance["years"].min())
            top_insur_tac_Y = Transaction_amount_count_Y(top_insurance, years)

            state = st.selectbox("Select The State_ti", top_insur_tac_Y["states"].unique())
            Top_insurance_plot_1(top_insur_tac_Y, state)

        elif method_3 == "Top Transaction":
            years = st.slider("Select The Year_tt", top_transaction["years"].min(),
                              top_transaction["years"].max(), top_transaction["years"].min())
            top_tran_tac_Y = Transaction_amount_count_Y(top_transaction, years)

            state = st.selectbox("Select The State_tt", top_tran_tac_Y["states"].unique())
            Top_insurance_plot_1(top_tran_tac_Y, state)

        elif method_3 == "Top User":
            years = st.slider("Select The Year_tu", top_user["years"].min(),
                              top_user["years"].max(), top_user["years"].min())
            top_user_Y = top_user_plot_1(top_user, years)

            state = st.selectbox("Select The State_tu", top_user_Y["states"].unique())
            top_user_plot_2(top_user_Y, state)


elif select == "TOP CHARTS":
    question = st.selectbox("Select the Question", ["1. Transaction Amount and Count of Aggregated Insurance",
                                                    "2. Transaction Amount and Count of Map Insurance",
                                                    "3. Transaction Amount and Count of Top Insurance",
                                                    "4. Transaction Amount and Count of Aggregated Transaction",
                                                    "5. Transaction Amount and Count of Map Transaction",
                                                    "6. Transaction Amount and Count of Top Transaction",
                                                    "7. Transaction Count of Aggregated User",
                                                    "8. Registered users of Map User",
                                                    "9. App Opens of Map User",
                                                    "10. Registered users of Top User"])

    if question == "1. Transaction Amount and Count of Aggregated Insurance":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("aggregated_insurance")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("aggregated_insurance")

    elif question == "2. Transaction Amount and Count of Map Insurance":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("map_insurance")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("map_insurance")

    elif question == "3. Transaction Amount and Count of Top Insurance":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("top_insurance")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("top_insurance")

    elif question == "4. Transaction Amount and Count of Aggregated Transaction":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("aggregated_transaction")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("aggregated_transaction")

    elif question == "5. Transaction Amount and Count of Map Transaction":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("map_transaction")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("map_transaction")

    elif question == "6. Transaction Amount and Count of Top Transaction":
        st.subheader("TRANSACTION AMOUNT")
        top_chart_transaction_amount("top_transaction")

        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("top_transaction")

    elif question == "7. Transaction Count of Aggregated User":
        st.subheader("TRANSACTION COUNT")
        top_chart_transaction_count("aggregated_user")

    elif question == "8. Registered users of Map User":
        states = st.selectbox("Select the State", map_user["states"].unique())
        top_chart_registered_user("map_user", states)

    elif question == "9. App Opens of Map User":
        states = st.selectbox("Select the State", map_user["states"].unique())
        top_chart_appopens("map_user", states)

    elif question == "10. Registered users of Top User":
        top_chart_registered_users("top_user")
print(Aggre_insurance.columns)
